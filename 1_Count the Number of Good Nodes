class Solution {
public:
    int goodnodes ;
    int dfs(vector<vector<int>> &adj , int node , int parent)
    {
        int total = 0 ;
        bool isvalid = true ;
        int subTree = -1 ;
        
        // traversing in another nodes
        for(auto it : adj[node])
        {
            if(it == parent)
            continue ;

            int curr = dfs(adj , it , node) ;

            if(subTree == -1)
            subTree = curr ;

            else if(subTree != curr)
            isvalid = false ;

            total += curr ;
        }
        if(isvalid)
        goodnodes++ ;

        return total + 1 ;  // self + all except self nodes
    }
    int countGoodNodes(vector<vector<int>>& edges) {
        int n = edges.size() ;

        // conversion to adjacency matrix
        vector<vector<int>>adj(n+1);

        for(int i = 0 ; i < n ; ++i)
        {
            adj[edges[i][0]].push_back(edges[i][1]) ;
            adj[edges[i][1]].push_back(edges[i][0]) ;
        }

        goodnodes = 0 ;

        dfs(adj , 0 , -1) ;

        return goodnodes ;
    }
};
