//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
  public:
    // Function to return a list containing the DFS traversal of the graph.
    
    void DFS(unordered_map<int, vector<int>> &mp, int u, vector<bool> &visited, vector<int> &res) {
    if (visited[u] == true) {
        return;
    }

    visited[u] = true;
    res.push_back(u);

    for (int &v : mp[u]) {
        if (!visited[v]) {
            DFS(mp, v, visited, res);
        }
    }
}

vector<int> dfsOfGraph(int V, vector<int> adj[]) {
    unordered_map<int, vector<int>> mp;

    // Populate the adjacency map
    for (int u = 0; u < V; ++u) {
        for (auto v = adj[u].begin(); v != adj[u].end(); v++) {
            mp[u].push_back(*v);
        }
    }

    vector<int> res;
    vector<bool> visited(V, false);

    // Assuming the graph is connected, we start DFS from node 0
    DFS(mp, 0, visited, res);

    return res;
}

};

//{ Driver Code Starts.
int main() {
    int tc;
    cin >> tc;
    while (tc--) {
        int V, E;
        cin >> V >> E;

        vector<int> adj[V];

        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        // string s1;
        // cin>>s1;
        Solution obj;
        vector<int> ans = obj.dfsOfGraph(V, adj);
        for (int i = 0; i < ans.size(); i++) {
            cout << ans[i] << " ";
        }
        cout << endl;
    }
    return 0;
}
// } Driver Code Ends
