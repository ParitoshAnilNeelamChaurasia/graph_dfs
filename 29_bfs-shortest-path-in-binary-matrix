// https://leetcode.com/problems/shortest-path-in-binary-matrix/

class Solution
{
public:
    int m;
    int n;
    vector<vector<int>> directions = {
        {-1, 1}, {0, 1}, {1, 1}, {-1, 0}, {1, 0}, {-1, -1}, {0, -1}, {1, -1}};

    bool is_valid(int i, int j)
    {
        if (i < 0 || i >= m || j < 0 || j >= n)
        {
            return false;
        }

        return true;
    }
    int shortestPathBinaryMatrix(vector<vector<int>> &grid)
    {
        m = grid.size();
        n = grid[0].size();

        int count = 0;

        if (grid[0][0] != 0)
        {
            return -1;
        }
        queue<pair<int, int>> q;
        q.push({0, 0});

        grid[0][0] = 1;

        while (!q.empty())
        {
            int sz = q.size();

            while (sz--)
            {
                auto cur = q.front();
                q.pop();

                int x = cur.first;
                int y = cur.second;

                if (x == m - 1 && y == n - 1)
                {
                    return count + 1;
                }

                for (auto dir : directions)
                {
                    int x_ = x + dir[0];
                    int y_ = y + dir[1];

                    if (is_valid(x_, y_) && grid[x_][y_] == 0)
                    {
                        q.push({x_, y_});
                        grid[x_][y_] = 1;
                    }
                }
            }
            count++;
        }
        return -1;
    }
};
