// https://leetcode.com/problems/is-graph-bipartite/

// 2 colors used
// red -> 1
// green -> 0


class Solution
{
public:
    int n;

    bool dfs(vector<vector<int>> &graph, int u, vector<int> &color, int curr_color)
    {
        color[u] = curr_color;

        for (int &v : graph[u])
        {
            if (color[v] == color[u])
            {
                return false;
            }

            if (color[v] == -1)
            {
                int color_of_v = 1 - curr_color;

                if (dfs(graph, v, color, color_of_v) == false)
                {
                    return false;
                }
            }
        }
        return true;
    }
    bool isBipartite(vector<vector<int>> &graph)
    {
        n = graph.size();

        vector<int> color(n, -1);

        for (int i = 0; i < n; ++i)
        {
            if (color[i] == -1)
            {
                if (dfs(graph, i, color, 1) == false)
                {
                    return false;
                }
            }
        }
        return true;
    }
};
