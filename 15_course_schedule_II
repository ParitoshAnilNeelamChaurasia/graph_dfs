// https://leetcode.com/problems/course-schedule-ii/description/

class Solution
{
public:
    vector<int> ans;

    bool f(unordered_map<int, vector<int>> &mp, int u, vector<bool> &visited, vector<bool> &isRecursion)
    {
        visited[u] = true;
        isRecursion[u] = true;

        for (int &v : mp[u])
        {
            if (!visited[v] && f(mp, v, visited, isRecursion))
            {
                return true;
            }
            else if (isRecursion[v])
            {
                return true;
            }
        }
        isRecursion[u] = false;
        ans.push_back(u);
        return false;
    }

    vector<int> findOrder(int numCourses, vector<vector<int>> &prerequisites)
    {

        unordered_map<int, vector<int>> mp;

        for (int i = 0; i < prerequisites.size(); ++i)
        {
            int a = prerequisites[i][0];
            int b = prerequisites[i][1];
            mp[b].push_back(a);
        }

        vector<bool> visited(numCourses, false);
        vector<bool> isRecursion(numCourses, false);

        for (int i = 0; i < numCourses; ++i)
        {
            if (!visited[i] && f(mp, i, visited, isRecursion))
            {
                return {};
            }
        }
        reverse(ans.begin(), ans.end());
        return ans;
    }
};
